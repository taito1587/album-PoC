// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // Custom fields for album app
  albums        Album[]
  media         Media[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Custom models for album app
model Album {
  id          String   @id @default(cuid())
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  title       String
  description String?
  isPublic    Boolean  @default(false)

  media       Media[]
  jobs        SlideshowJob[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([ownerId, createdAt])
}

model Media {
  id         String   @id @default(cuid())

  albumId    String
  album      Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)

  ownerId    String
  owner      User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // 保存先
  storageKey String   // 例: local:<path> / s3:<key>
  mime       String
  width      Int?
  height     Int?
  durationMs Int?     // 動画の場合

  caption    String?
  tags       Json?    // ← MySQLはstring[]非対応。Jsonで配列管理
  
  // 画像分析結果
  category   String?  // 画像カテゴリ (landscape, portrait, food, etc.)
  confidence Float?   // 分析の信頼度 (0.0-1.0)
  colors     Json?    // 支配的な色の配列
  analyzed   Boolean  @default(false) // 分析済みフラグ

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([albumId, createdAt])
  @@index([ownerId, createdAt])
  @@index([category, createdAt])
  @@index([ownerId, category])
}

model SlideshowJob {
  id        String   @id @default(cuid())

  albumId   String
  album     Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)

  // 入力パラメタ（JSON文字列ではなく、構造化したければ Json も可）
  params    String   @db.Text

  // 状態
  status    String   @default("queued") // queued | processing | done | failed
  progress  Int      @default(0)
  resultKey String?  // 出力動画のstorageKey
  errorMsg  String?  @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([albumId, createdAt])
  @@index([status, createdAt])
}
